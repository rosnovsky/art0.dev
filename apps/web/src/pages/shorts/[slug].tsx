import Head from "next/head";
import { GetStaticPropsContext } from "next";
import { createContext } from "../../server/router/context";
import { createProxySSGHelpers } from "@trpc/react/ssg";
import { appRouter } from "../api/trpc/[trpc]";
import superjson from "superjson";
import { trpc } from "../../utils/trpc";
import { prisma } from "../../server/db/client";
import Image from "next/future/image";

const NewUrl = ({ slug }: { slug: string }) => {
  const shortQuery = trpc.getUrl.useQuery({ slug });
  const { data } = shortQuery;
  return (
    <>
      <Head>
        <title>art0.dev - URL Shortener</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          <pre>art0.dev</pre>
        </h1>
        <p className="text-2xl text-gray-700">A URL Shortener</p>
        <div className="pt-6 text-2xl text-blue-500 flex justify-center items-center w-full">
          {data?.longUrl}
        </div>
        <div><Image src={data?.screenshot || ""} width={600} height={400} alt="" /></div>
      </main>
    </>
  );
};

export default NewUrl;

export async function getStaticPaths() {
  const urls = await prisma.shorts.findMany({
    select: {
      slug: true,
    },
  });
  const paths = urls.map((url) => ({
    params: { slug: url.slug },
  }));
  return {
    paths,
    fallback: "blocking",
  };
}

export async function getStaticProps(context: GetStaticPropsContext<any>) {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    // @ts-expect-error not sure why this is an error
    ctx: await createContext(context),
    transformer: superjson,
  });

  const slug = context.params.slug;
  await ssg.getUrl.fetch({ slug });
  return {
    props: {
      trpcState: ssg.dehydrate(),
      slug,
    },
    revalidate: 5
  };
}
