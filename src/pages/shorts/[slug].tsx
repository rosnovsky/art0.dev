import Head from "next/head";
import { trpc } from "../../utils/trpc";
import { createSSGHelpers } from '@trpc/react/ssg';
import { GetStaticPropsContext, InferGetServerSidePropsType } from 'next';
import { createContext } from '../../server/router/context';
import { appRouter } from '../../server/router';
import superjson from 'superjson';

const Home = (props: InferGetServerSidePropsType<typeof getStaticProps>) => {
  const shortQuery = trpc.useQuery(['urls.getUrl', { slug: props.slug }]);
  const { data } = shortQuery;
  return (
    <>
      <Head>
        <title>art0.dev - URL Shortener</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          <pre>art0.dev</pre>
        </h1>
        <p className="text-2xl text-gray-700">A URL Shortener</p>
        <div className="pt-6 text-2xl text-blue-500 flex justify-center items-center w-full">
          {data?.longUrl}
        </div>
      </main>
    </>
  );
};

export default Home;

export async function getStaticPaths() {
  const ssg = createSSGHelpers({
    router: appRouter,
    // @ts-expect-error not sure why this is an error
    ctx: await createContext(),
    transformer: superjson,
  });
  const urls = await ssg.fetchQuery('urls.getAll');
  const paths = urls.map((url) => ({
    params: { slug: url.slug },
  }));
  return {
    paths,
    fallback: 'blocking',
  };
}


export async function getStaticProps(
  context: GetStaticPropsContext<{ slug: string }>,
) {
  const ssg = createSSGHelpers({
    router: appRouter,
    // @ts-expect-error not sure why this is an error
    ctx: await createContext(context),
    transformer: superjson,
  });

  const slug = context.params?.slug || "";
  await ssg.fetchQuery('urls.getUrl', { slug });
  return {
    props: {
      trpcState: ssg.dehydrate(),
      slug,
    },
  };
}
